[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "crawler-mcp"
version = "0.1.0"
description = "FastMCP RAG-enabled web crawling MCP server with Crawl4AI and Qdrant"
readme = "README.md"
license = "MIT"
authors = [
    {name = "Jacob Magar", email = "jmagar@gmail.com"}
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.11"
dependencies = [
    # FastMCP 2.0 server framework
    "fastmcp>=2.0.0",
    # Web crawling and scraping
    "crawl4ai>=0.7.2",
    "httpx>=0.25.0",
    # Vector database
    "qdrant-client>=1.15.1",
    # Data processing
    "pydantic>=2.5.0",
    # Logging and monitoring
    "structlog>=23.2.0",
    "rich>=13.7.0",
    # Environment and configuration
    "python-dotenv>=1.0.0",
    # System monitoring (optional but recommended)
    "psutil>=5.9.0",
    # Git repository operations
    "gitpython>=3.1.40",
    # Document parsing
    "pypdf2>=3.0.1",
    "python-docx>=1.1.0",
    "chardet>=5.2.0",
    "pydantic-settings>=2.10.1",
    "tiktoken>=0.9.0",
    "python-dateutil>=2.9.0.post0",
    # ML/AI dependencies for core RAG functionality
    "torch>=2.8.0",
    "transformers>=4.55.0",
    "sentence-transformers>=5.1.0",
    # GitHub webhook server dependencies
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.12.0",
    "mypy>=1.17.0",
    "pre-commit>=3.5.0",
    "coverage>=7.10.3",
    "types-psutil>=7.0.0.20250801",
]
test = [
    "pytest>=8.4.0",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.0.0",
    "pytest-rerunfailures>=14.0",
    "httpx>=0.25.0",
    "pytest-mock>=3.12.0",
]

[project.scripts]
crawler-mcp = "crawler_mcp.server:main"
crawler-webhook = "crawler_mcp.webhook.server:main"

[tool.setuptools.packages.find]
where = ["."]

[tool.ruff]
target-version = "py311"
line-length = 88
fix = true
show-fixes = true
cache-dir = ".cache/ruff"

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "B",    # flake8-bugbear
    "C4",   # flake8-comprehensions
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "SIM",  # flake8-simplify
    "RUF",  # ruff-specific rules
]
ignore = [
    "E501",   # line too long (handled by formatter)
    "B008",   # do not perform function calls in argument defaults
    "N806",   # variable in function should be lowercase (for Pydantic)
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
cache_dir = ".cache/mypy"
strict_optional = true
show_error_codes = true
disallow_any_generics = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true

# Allow protocols to be mixed with runtime implementations
allow_subclassing_any = true
allow_untyped_calls = false

# Enable strict type checking

# Handle missing imports gracefully for optional dependencies
ignore_missing_imports = false
follow_imports = "silent"

[[tool.mypy.overrides]]
module = [
    "crawl4ai",
    "crawl4ai.*"
]
ignore_missing_imports = true
follow_imports = "skip"

[tool.pytest.ini_options]
cache_dir = ".cache/pytest"
minversion = "8.4"
addopts = [
    "--strict-config",
    "--strict-markers",
    "--tb=short",
    "-ra",
]
testpaths = ["tests"]
asyncio_mode = "auto"
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore:.*@validator.*is deprecated:DeprecationWarning",
    "ignore:Support for class-based.*config.*is deprecated.*:DeprecationWarning",
    # Comprehensive BeautifulSoup 'text' argument deprecation warning filters
    "ignore:.*'text'.*argument.*find.*deprecated.*:DeprecationWarning",
    "ignore:The 'text' argument to find\\(\\)-type methods is deprecated.*:DeprecationWarning",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "requires_services: marks tests that require external services (Qdrant, TEI)",
    "asyncio: marks tests as asyncio tests",
]

[dependency-groups]
dev = [
    "pre-commit>=4.3.0",
]

# Dependency groups removed - use project.optional-dependencies instead
